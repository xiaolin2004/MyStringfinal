2023/5/21
详细阅读项目要求文件，对程序结构作了以下规划：
1.将modern cpp string与cstring分开编写
2.编写统一的测试头文件

2023/5/22
实现cstring中除了strcoll之外的所有函数，strcoll需要本地化文件，无法编写，如果调用local.h会导致代码陷入死循环，导致报错。

2023/5/23
阅读《STL源码剖析》，对String类有全面的了解，为该类的实现作了以下规划：
1.编写萃取器，并按照STL标准对其进行特化与偏特化处理
2.按照开发要求，编写类的抽象接口（即各种函数），先完成声明，后面再着手实现。

已将规划实现为思维导图，最终版本将会与程序一起打包发送。

开始编写萃取器

2023/5/24
观摩了STL源码实现，决定使用宏简化代码
学习了宏函数的编写方法

2023/5/25
写到头昏脑涨，需要重新学习泛型编程

2023/5/26
阅读了《C++ Template complete guide》掌握初步泛型编程方法，开始按照规范复现STL-string

完成basic_string类的声明，并对部分函数进行实现

2023/5/27
在实现string::at(size_t n)时，发现需要进行边界判断，想到在string类中，许多操作都涉及边界检查，因此对边界判断代码编写为宏，作为std异常处理的补充，为了解耦，将其存放在exceptdef.h中，并在该头文件中，将c的断言函数声明为宏（可惜在csring实现的时候没有想到这个）。
完成 特殊函数（构造、复制、移动、析构函数）的实现
完成元素访问相关操作的实现
完成容量调整相关操作的实现

2023/5/28
完成元素添加删除相关操作的实现
完成对象间操作的实现
完成查找操作实现
完成重载操作实现

2023/5/29
开始进行迭代器相关操作实现（难点）
仔细研究了stl迭代器的实现（flag），仿照标准库实现了精简版本的迭代器库以更好适配mystring，存放在iterator.h。主要添加了宏定义以简化代码。
运用自定义迭代器实现迭代器相关操作。

2023/5/30
对代码进行精简，将重复编写的代码打包成函数，存放在类中的helper functions中，优化代码可读性。另一个目的是方便后期调试。
开始着手将测试进行打包。

2023/5/31
在观看测试相关的教程后，决定在开源程序的基础上进行修改，实现本项目的测试程序。
基础程序来源于 https://github.com/agauniyal/rang
color.h用于控制终端打印的文字颜色
platform.h用于适配各个运行平台
此程序没有被修改
存放在lib文件夹中
将用于测试stl容器的代码框架依照相似逻辑，重写到了test.h中
（祈求可以顺利跑起来，明天再写测试实现代码）

2023/6/1
将零散的cstring测试代码集成到cstring_test.h文件中，打包在cstring_test函数中
依照test.h的宏实现string测试代码
没有跑起来

2023/6/2
痛苦的Debug过程
重要错误1：命名空间混淆，有时调用std，有时调用个人实现代码
优化命名空间写法，将代码全都集成在namespace mystl中
重要错误2：测试框架中的宏代码并不按照预期行为运行
一个一个改，头皮发麻

2023/6/3
还有一些内存泄漏问题，不过很好修复
已经可以跑起来了

2023/6/4
对项目进行移植尝试（保证可发布和传输），优化include路径结构

2023/6/5
尝试将项目（除了测试程序外）完全不依赖stl的可用string类，着手整理并实现各种stl库文件。
沿着依赖树将所有文件都实现，除了iostream（超出能力范围）
补充了思维导图，程序框架已经搭建完毕

2023/6/6
参照《STL源码剖析》，实现了迭代器

2023/6/7
实现内存管理，与functional（仿函数）以及utility库

2023/6/8
修改测试函数，加入计算程序运行时间功能，并与stl::string的用时进行比较，在debug下用时约为stl库的一半，在release下用时大约为stl库运行用时的两倍（不建议在项目中使用，可能因为个人实现有一些细节没有注意到，导致编译器优化被关闭）

项目开发完成，可发布。














